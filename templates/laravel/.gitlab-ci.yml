# @format

image: tomgrv/ci-builder:3.3.0

.init_ssh: &init_ssh
    - eval $(ssh-agent -s)
    - echo "${SSH_PRIVATE_KEY}" | tr -d '\r' | ssh-add - > /dev/null
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - if test -f /.dockerenv; then echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config; fi

.change_file_permissions: &change_file_permissions
    - find . -type f -not -path "./vendor/*" -exec chmod 664 {} \;
    - find . -type d -not -path "./vendor/*" -exec chmod 775 {} \;

.artisan_init: &artisan_init
    - if test -f .env.build; then cp .env.build .env; else echo -e "APP_KEY=\nDB_CONNECTION=sqlite\nDB_DATABASE=storage/app/db" > .env; fi
    - touch $(awk 'BEGIN { FS = "=" } /DB_DATABASE/ { print $2; }' .env)
    - php artisan key:generate

.artisan_deploy: &artisan_deploy
    - typeset var USERNAME=${GITLAB_USER_LOGIN}
    - php artisan deploy --option gitversion_enabled=true --no-interaction --branch=${CI_COMMIT_REF_NAME} ${CI_ENVIRONMENT_SLUG} -vv

.artisan_unlock: &artisan_unlock
    - typeset var USERNAME=${GITLAB_USER_LOGIN}
    - php artisan deploy:run deploy:unlock --no-interaction --branch=${CI_COMMIT_REF_NAME} ${CI_ENVIRONMENT_SLUG} -vv

.composer_install: &composer_install
    - composer install --prefer-dist --no-interaction --no-progress --no-suggest

.composer_clean: &composer_clean
    - composer install --prefer-dist --no-interaction --no-progress --no-suggest --no-dev --optimize-autoloader

.gitversion: &gitversion
    - dotnet-gitversion
    - if test -f .gitversion.yml; then dotnet-gitversion /config .gitversion.yml; else dotnet-gitversion; fi > .version.json
    - npx convert-json-env .version.json --out .version.env --prefix="export GitVersion_"
    - source .version.env
    - echo ${GitVersion_InformationalVersion}

.deploy: &deploy
    stage: deploy
    variables:
        DEFAULT_USER_EMAIL: ${GITLAB_USER_EMAIL}
        DEFAULT_USER_NAME: ${GITLAB_USER_NAME}
    script:
        - *init_ssh
        - *composer_clean
        - *change_file_permissions
        - *artisan_init
        - *artisan_deploy

.unlock: &unlock
    stage: deploy
    needs:
        - composer
    script:
        - *init_ssh
        - *artisan_init
        - *artisan_unlock
    allow_failure: true

before_script:
    - npm -g set git-tag-version false
    - if test -f .version.env; then source .version.env; fi
    - echo ${GitVersion_InformationalVersion}

variables:
    COMPOSER_MEMORY_LIMIT: '-1'
    GIT_DEPTH: 0

workflow:
    rules:
        - if: $CI_MERGE_REQUEST_IID
        - if: $CI_COMMIT_BRANCH

stages:
    - prepare
    - build
    - quality
    - deploy

checkout:
    stage: prepare
    script:
        - *gitversion
        - echo ${GitVersion_FullSemVer} > VERSION
    artifacts:
        paths:
            - VERSION
            - .version.env

composer:
    stage: build
    cache:
        key: ${CI_COMMIT_REF_SLUG}-composer
        paths:
            - vendor/
    script:
        - *composer_install
    rules:
        - exists:
            - composer.json
    artifacts:
        paths:
            - vendor/
    interruptible: true

node:
    stage: build
    cache:
        key: ${CI_COMMIT_REF_SLUG}-node
        paths:
            - node_modules/
            - public/
    script:
        - PATH=node_modules/.bin:$PATH
        - npm install --unsafe-perm --silent
        - npm run production --silent
    rules:
        - exists:
              - package.json
    artifacts:
        paths:
            - public/css/
            - public/js/
            - public/images/
            - public/modules/
            - public/mix-manifest.json
    interruptible: true

codestyle:
    stage: quality
    script:
        - ls -la
        - composer lint-check .
        - npx prettier --ignore-path ./.gitignore --require-pragma --check '**/*.{js,jsx,ts,tsx,md,html,css}'
    interruptible: true

phpunit:
    stage: quality
    script:
        - phpunit --coverage-text
    dependencies:
        - composer
    rules:
        - if: '$CI_PROJECT_NAMESPACE !~ /template/ && $CI_PROJECT_NAME !~ /template/'
          exists:
              - phpunit.xml
    interruptible: true

devpmt:
    <<: *deploy
    environment:
        name: devpmt
        url: https://${DEPLOY_BETA}
    rules:
        - if: '$CI_COMMIT_BRANCH == "develop" || $CI_COMMIT_BRANCH =~ /^feature/'
          exists:
              - artisan
              - composer.json
              - app/config/deploy.php

devpmt-unlock:
    <<: *unlock
    environment:
        name: devpmt
    rules:
        - if: '$CI_COMMIT_BRANCH == "develop" || $CI_COMMIT_BRANCH =~ /^feature/'
          exists:
              - artisan
              - composer.json
              - app/config/deploy.php
          when: manual

staging:
    <<: *deploy
    environment:
        name: staging
        url: https://${DEPLOY_STAGING}
    rules:
        - if: '$CI_COMMIT_BRANCH == "main" || $CI_COMMIT_BRANCH =~ /^release/'
          exists:
              - artisan
              - composer.json
              - app/config/deploy.php

staging-unlock:
    <<: *unlock
    environment:
        name: staging
    rules:
        - if: '$CI_COMMIT_BRANCH == "main" || $CI_COMMIT_BRANCH =~ /^release/'
          exists:
              - artisan
              - composer.json
              - app/config/deploy.php
          when: manual

production:
    <<: *deploy
    environment:
        name: production
        url: https://${DEPLOY_PRODUCTION}
    rules:
        - if: '$CI_COMMIT_BRANCH == "main"'
          exists:
              - artisan
              - composer.json
              - app/config/deploy.php
          when: manual

production-unlock:
    <<: *unlock
    environment:
        name: production
    rules:
        - if: '$CI_COMMIT_BRANCH == "main"'
          when: manual
          exists:
              - artisan
              - composer.json
              - app/config/deploy.php
          when: manual



