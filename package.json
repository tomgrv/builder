{
    "name": "tomgrv-ci-builder",
    "version": "3.2.0",
    "description": "Alpine 3.8 image with dotnet sdk, node, php7 + Gittools/GitVersion",
    "main": "Dockerfile",
    "author": "tomgrv",
    "license": "MIT",
    "bugs": {
        "url": "https://github.com/tomgrv/ci-builder/issues"
    },
    "homepage": "https://github.com/tomgrv/ci-builder#readme",
    "repository": {
        "type": "git",
        "url": "git+https://github.com/tomgrv/ci-builder.git"
    },
    "dependencies": {},
    "devDependencies": {
        "@commitlint/cli": "^11.0.0",
        "@commitlint/config-conventional": "^11.0.0",
        "@commitlint/core": "^11.0.0",
        "commitiquette": "^1.0.8",
        "commitizen": "^4.2.1",
        "conventional-changelog-cli": "^2.1.0",
        "cross-env": "^7.0",
        "devmoji": "^2.1.10",
        "env-cmd": "^10.1.0",
        "git-precommit-checks": "^3.0.6",
        "husky": "^4.3.0",
        "laravel-mix": "^5.0.7",
        "lint-staged": "^10.4.2",
        "npm-run-all": "^4.1.5",
        "prettier": "^2.1.2",
        "standard-version": "^9.0.0",
        "subpkg": "^4.0.1"
    },
    "peerDependencies": {
        "ntl": "^5.1.0",
        "dotnet-run": "1.3.1"
    },
    "scripts": {
        "test": "echo \"Error: no test specified\" && exit 1",
        "lint": "cross-env prettier --ignore-path ./.gitignore --write '**/*.{js,jsx,ts,tsx,md,html,css,json,vue}'",
        "postlint": "subpkg run lint",
        "postinstall": "npm dedupe && npm prune && npm audit fix && subpkg run install",
        "update": "npx npm-check-updates -i -u",
        "init": "run-s -c init:* git:version:inst lint",
        "init:gitflow": "git flow init -d -f && (git branch develop || echo skip) && git checkout develop",
        "release": "npm run git:version:shell -- standard-version --tag-prefix \\\"\\\" --release-as $SemVer",
        "release:as": "standard-version --no-verify --skip.tag --release-as",
        "release:first": "standard-version --tag-prefix \"\" --first-release",
        "git:list": "git log --graph --pretty=\"format:%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset\" --abbrev-commit --decorate --date=short --color develop@{push}.. | devmoji --log --color",
        "git:amend": "run-s git:check && (git diff-index --cached --quiet HEAD || git commit --no-verify --amend -C HEAD)",
        "git:check": "git-precommit-checks && lint-staged",
        "git:commit": "cross-env GIT_EDITOR=: git commit",
        "git:version:install": "dotnet tool install -g gitversion.tool",
        "git:version:shell": "dotnet-gitversion > .git/version.json && env-cmd -f .git/version.json -x cross-env-shell",
        "git:feature:start": "cross-env git flow feature start",
        "git:feature:finish": "npm run git:version:shell -- npm run release:as $SemVer && git flow feature finish",
        "git:release:start": "npm run git:version:shell -- git flow release start $MajorMinorPatch",
        "git:release:finish": "npm run git:version:shell -- npm run release:as $MajorMinorPatch && git flow release finish -T $MajorMinorPatch -m Release",
        "git:hotfix:start": "cross-env git flow hotfix start from-$npm_package_version",
        "git:hotfix:finish": "npm run git:version:shell -- npm run release:as $MajorMinorPatch && git flow hotfix finish -T $MajorMinorPatch -m Hotfix",
        "git:bugfix:start": "cross-env git flow bugfix start",
        "git:bugfix:finish": "npm run git:version:shell -- npm run release:as $SemVer && git flow bugfix finish"
    },
    "subPackages": [],
    "config": {
        "commitizen": {
            "path": "commitiquette"
        }
    },
    "husky": {
        "hooks": {
            "pre-commit": "git-precommit-checks && lint-staged",
            "prepare-commit-msg": "[[ $(grep -cv -e '^#' -e '^$' .git/COMMIT_EDITMSG) -eq 0 ]] && (exec < /dev/tty && git cz --hook && devmoji -e || echo skip commit) || echo skip prepare",
            "commit-msg": "commitlint -E HUSKY_GIT_PARAMS"
        }
    },
    "lint-staged": {
        "*.{js,jsx,ts,tsx,md,html,css,json,vue}": [
            "prettier --write"
        ],
        "*.php": [
            "npx path-exists ./vendor/bin/phpcbf && ./vendor/bin/phpcbf -a -p || echo 'Please run: composer --require-dev \"squizlabs/php_codesniffer=*\"'"
        ]
    },
    "commitlint": {
        "extends": [
            "@commitlint/config-conventional"
        ],
        "rules": {
            "subject-case": [
                2,
                "never",
                [
                    "start-case",
                    "pascal-case",
                    "upper-case"
                ]
            ],
            "scope-enum": [
                2,
                "always",
                [
                    "deps",
                    "release",
                    "security",
                    "i18n",
                    "config",
                    "add",
                    "remove",
                    "breaking",
                    "auth",
                    "ui-ux",
                    "api",
                    "model"
                ]
            ]
        }
    },
    "git-precommit-checks": {
        "rules": [
            {
                "message": "Youâ€™ve got leftover conflict markers",
                "regex": "/^[<>|=]{4,}/m"
            },
            {
                "message": "You have unfinished devs",
                "nonBlocking": "true",
                "regex": "(?:FIXME|TODO)"
            }
        ]
    },
    "prettier": {
        "trailingComma": "es5",
        "tabWidth": 4,
        "semi": false,
        "singleQuote": true,
        "insertPragma": true
    }
}
